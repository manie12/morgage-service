openapi: 3.0.3

info:
  title: Mortgage Application Service
  version: 1.0.0
  description: |
    Reactive REST API powering end-to-end mortgage applications.

servers:
  - url: /api/v1

tags:
  - name: Applications
    description: Submit & track mortgage applications
  - name: Decisions
    description: Credit-officer approvals & rejections

security:
  - bearerAuth: [ ]

components:
  #############################
  #  Security
  #############################
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  #############################
  #  Common headers / params
  #############################
  parameters:
    Page:
      in: query
      name: page
      schema: { type: integer, minimum: 0, default: 0 }
    Size:
      in: query
      name: size
      schema: { type: integer, minimum: 1, maximum: 100, default: 20 }
    Sort:
      in: query
      name: sort
      description: property,direction (e.g. `createdAt,desc`)
      schema: { type: string, default: createdAt,desc }

  headers:
    ETag:
      description: Entity tag for optimistic locking
      schema: { type: string }
    IdempotencyKey:
      description: Idempotency key for safe retries
      schema: { type: string }
    Traceparent:
      description: W3C trace context header
      schema: { type: string }
    Correlation-Id:
      description: Correlates requests across services
      schema: { type: string }
    X-Total-Count:
      description: Total number of elements for paginated lists
      schema: { type: integer, format: int64 }

  #############################
  #  Problem Details
  #############################
  schemas:
    Problem:
      type: object
      description: RFC 9457 Problem Details
      required: [ type, title, status ]
      properties:
        type: { type: string, format: uri }
        title: { type: string }
        status: { type: integer, format: int32 }
        detail: { type: string }
        instance: { type: string, format: uri }
        errors:
          description: Field-level validation errors
          type: object
          additionalProperties:
            type: array
            items: { type: string }

    # --- domain enums & dtos (unchanged) ---
    Status:
      type: string
      enum: [ DRAFT, SUBMITTED, UNDER_REVIEW, APPROVED, REJECTED, WITHDRAWN ]
    DecisionType:
      type: string
      enum: [ APPROVED, REJECTED ]
    DocumentMetadata:
      type: object
      required: [ type, fileName, contentType, sizeBytes, uploadUrl ]
      properties:
        type: { type: string, example: NATIONAL_ID }
        fileName: { type: string }
        contentType: { type: string, example: application/pdf }
        sizeBytes: { type: integer, format: int64, minimum: 1 }
        uploadUrl: { type: string }
        checksum: { type: string, nullable: true }

    # --- create & decision requests ---
    ApplicationCreateRequest:
      type: object
      required:
        [ loanAmount, currency, nationalId, fullName, email, phone,
          propertyAddress, propertyValue, propertyType ]
      properties:
        externalRef: { type: string, nullable: true }
        nationalId: { type: string }
        fullName: { type: string }
        email: { type: string, format: email }
        phone: { type: string }
        loanAmount: { type: number, format: double, minimum: 1 }
        currency: { type: string, example: KES }
        income: { type: number, format: double, minimum: 0 }
        liabilities: { type: number, format: double, minimum: 0 }
        propertyAddress:{ type: string }
        propertyValue: { type: number, format: double, minimum: 0 }
        propertyType: { type: string, example: RESIDENTIAL }
        documents:
          type: array
          items: { $ref: '#/components/schemas/DocumentMetadata' }

    DecisionRequest:
      type: object
      required: [ decision ]
      properties:
        decision: { $ref: '#/components/schemas/DecisionType' }
        comments: { type: string, nullable: true }

    # --- responses (truncated for brevity, same as original spec) ---
    DecisionResponse: { ... }
    ApplicationResponse: { ... }
    ApplicationListResponse: { ... }

  #############################
  #  Reusable response objects
  #############################
  responses:
    Unauthorized:
      description: JWT missing or invalid
      content:
        application/problem+json:
          schema: { $ref: '#/components/schemas/Problem' }

    Forbidden:
      description: Caller lacks roles / ownership
      content:
        application/problem+json:
          schema: { $ref: '#/components/schemas/Problem' }

    NotFound:
      description: Resource not found
      content:
        application/problem+json:
          schema: { $ref: '#/components/schemas/Problem' }

    ValidationError:
      description: Request validation failed
      content:
        application/problem+json:
          schema: { $ref: '#/components/schemas/Problem' }

paths:

  ###################################
  #  Create application
  ###################################
  /applications:
    post:
      tags: [ Applications ]
      summary: Submit a new mortgage application
      security: [ { bearerAuth: [ ] } ]
      operationId: createApplication
      parameters:
        - $ref: '#/components/parameters/Sort'       # (optional)
        - name: Idempotency-Key
          in: header
          required: false
          schema: { type: string }
        - $ref: '#/components/headers/Traceparent'
        - $ref: '#/components/headers/Correlation-Id'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ApplicationCreateRequest' }
      responses:
        '201':
          description: Created
          headers:
            ETag: { $ref: '#/components/headers/ETag' }
            X-Total-Count: { $ref: '#/components/headers/X-Total-Count' }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApplicationResponse' }
        '400': { $ref: '#/components/responses/ValidationError' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '409':
          description: Idempotency key conflict or invalid state
          content:
            application/problem+json:
              schema: { $ref: '#/components/schemas/Problem' }
        '429':
          description: Rate-limited
          content:
            application/problem+json:
              schema: { $ref: '#/components/schemas/Problem' }

  ###################################
  #  Get application by ID
  ###################################
  /applications/{id}:
    get:
      tags: [ Applications ]
      summary: Fetch application by ID
      security: [ { bearerAuth: [ ] } ]
      operationId: getApplication
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
        - name: include
          in: query
          schema: { type: string, example: documents,decisions }
        - $ref: '#/components/headers/Traceparent'
        - $ref: '#/components/headers/Correlation-Id'
      responses:
        '200':
          description: OK
          headers:
            ETag: { $ref: '#/components/headers/ETag' }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApplicationResponse' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }

  ###################################
  #  List / filter applications
  ###################################
  /applications:
    get:
      tags: [ Applications ]
      summary: List or filter applications
      security: [ { bearerAuth: [ ] } ]
      operationId: listApplications
      parameters:
        - in: query
          name: status
          schema:
            type: array
            items: { $ref: '#/components/schemas/Status' }
          style: form
          explode: true
        - in: query
          name: createdFrom
          schema: { type: string, format: date-time }
        - in: query
          name: createdTo
          schema: { type: string, format: date-time }
        - in: query
          name: nationalId
          schema: { type: string }
          description: OFFICER only â€“ raw ID; server hashes internally
        - in: query
          name: applicantUserId
          schema: { type: string }
          description: OFFICER only
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Size'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/headers/Traceparent'
        - $ref: '#/components/headers/Correlation-Id'
      responses:
        '200':
          description: OK
          headers:
            X-Total-Count: { $ref: '#/components/headers/X-Total-Count' }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApplicationListResponse' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }

  ###################################
  #  Officer decision
  ###################################
  /applications/{id}/decision:
    patch:
      tags: [ Decisions ]
      summary: Approve or reject an application
      security: [ { bearerAuth: [ ] } ]
      operationId: decideApplication
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
        - name: If-Match
          in: header
          required: true
          schema: { type: string }
        - $ref: '#/components/headers/Traceparent'
        - $ref: '#/components/headers/Correlation-Id'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/DecisionRequest' }
      responses:
        '200':
          description: Decision recorded
          headers:
            ETag: { $ref: '#/components/headers/ETag' }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApplicationResponse' }
        '400': { $ref: '#/components/responses/ValidationError' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '409':
          description: Version conflict / invalid state
          content:
            application/problem+json:
              schema: { $ref: '#/components/schemas/Problem' }