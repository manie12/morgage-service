openapi: 3.0.3
info:
  title: Mortgage Application Service
  version: 1.0.0
servers:
  - url: /api/v1
security:
  - bearerAuth: [ ]
tags:
  - name: Applications
  - name: Decisions
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    Page:
      in: query
      name: page
      schema: { type: integer, minimum: 0, default: 0 }
    Size:
      in: query
      name: size
      schema: { type: integer, minimum: 1, maximum: 100, default: 20 }
    Sort:
      in: query
      name: sort
      description: property,direction (e.g., createdAt,desc)
      schema: { type: string, default: createdAt,desc }
  headers:
    ETag:
      schema: { type: string }
      description: Current entity version tag for optimistic concurrency.
    IdempotencyKey:
      schema: { type: string }
      description: Provide for idempotent POST.
  schemas:
    Status:
      type: string
      enum: [ DRAFT, SUBMITTED, UNDER_REVIEW, APPROVED, REJECTED, WITHDRAWN ]
    DecisionType:
      type: string
      enum: [ APPROVED, REJECTED ]
    DocumentMetadata:
      type: object
      required: [ type, fileName, contentType, sizeBytes, uploadUrl ]
      properties:
        type: { type: string, example: NATIONAL_ID }
        fileName: { type: string }
        contentType: { type: string, example: application/pdf }
        sizeBytes: { type: integer, format: int64, minimum: 1 }
        uploadUrl: { type: string }
        checksum: { type: string, nullable: true }
    ApplicationCreateRequest:
      type: object
      required: [ loanAmount, currency, nationalId, fullName, email, phone, propertyAddress, propertyValue, propertyType ]
      properties:
        externalRef: { type: string, nullable: true }
        nationalId: { type: string }
        fullName: { type: string }
        email: { type: string, format: email }
        phone: { type: string }
        loanAmount: { type: number, format: double, minimum: 1 }
        currency: { type: string, example: KES }
        income: { type: number, format: double, minimum: 0 }
        liabilities: { type: number, format: double, minimum: 0 }
        propertyAddress: { type: string }
        propertyValue: { type: number, format: double, minimum: 0 }
        propertyType: { type: string, example: RESIDENTIAL }
        documents:
          type: array
          items: { $ref: '#/components/schemas/DocumentMetadata' }
    DecisionRequest:
      type: object
      required: [ decision ]
      properties:
        decision: { $ref: '#/components/schemas/DecisionType' }
        comments: { type: string, nullable: true }
    DecisionResponse:
      type: object
      properties:
        id: { type: string, format: uuid }
        applicationId: { type: string, format: uuid }
        decision: { $ref: '#/components/schemas/DecisionType' }
        officerUserId: { type: string }
        officerName: { type: string }
        comments: { type: string, nullable: true }
        decidedAt: { type: string, format: date-time }
    ApplicationResponse:
      type: object
      properties:
        id: { type: string, format: uuid }
        externalRef: { type: string, nullable: true }
        applicantUserId: { type: string }
        nationalIdMasked: { type: string, example: *********123 }
        loanAmount: { type: number, format: double }
        currency: { type: string }
        income: { type: number, format: double }
        liabilities: { type: number, format: double }
        propertyAddress: { type: string }
        propertyValue: { type: number, format: double }
        propertyType: { type: string }
        status: { $ref: '#/components/schemas/Status' }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
        submittedAt: { type: string, format: date-time, nullable: true }
        decidedAt: { type: string, format: date-time, nullable: true }
        documents:
          type: array
          items: { $ref: '#/components/schemas/DocumentMetadata' }
        lastDecision: { $ref: '#/components/schemas/DecisionResponse' }
        version: { type: integer, format: int32 }
    ApplicationListResponse:
      type: object
      properties:
        data:
          type: array
          items: { $ref: '#/components/schemas/ApplicationResponse' }
        page: { type: integer }
        size: { type: integer }
        totalElements: { type: integer, format: int64 }
        totalPages: { type: integer }
    ErrorResponse:
      type: object
      properties:
        timestamp: { type: string, format: date-time }
        path: { type: string }
        traceId: { type: string }
        errorCode: { type: string }
        message: { type: string }
        details:
          type: array
          items: { type: string }

paths:
  /applications:
    post:
      tags: [ Applications ]
      summary: Create new application
      security: [ { bearerAuth: [ ] } ]
      parameters:
        - name: Idempotency-Key
          in: header
          required: false
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ApplicationCreateRequest' }
      responses:
        '201':
          description: Created
          headers:
            ETag: { $ref: '#/components/headers/ETag' }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApplicationResponse' }
        '400': { description: Validation error, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '401': { description: Unauthorized }
        '403': { description: Forbidden }
        '409': { description: Conflict (idempotency, state), content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '429': { description: Rate limited }
  /applications/{id}:
    get:
      tags: [ Applications ]
      summary: Fetch application by ID
      security: [ { bearerAuth: [ ] } ]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
        - name: include
          in: query
          schema: { type: string, example: "documents,decisions" }
      responses:
        '200':
          description: OK
          headers:
            ETag: { $ref: '#/components/headers/ETag' }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApplicationResponse' }
        '404': { description: Not found }
        '403': { description: Forbidden }
  /applications:
    get:
      tags: [ Applications ]
      summary: List / filter applications
      security: [ { bearerAuth: [ ] } ]
      parameters:
        - in: query
          name: status
          schema:
            type: array
            items: { $ref: '#/components/schemas/Status' }
          style: form
          explode: true
        - in: query
          name: createdFrom
          schema: { type: string, format: date-time }
        - in: query
          name: createdTo
          schema: { type: string, format: date-time }
        - in: query
          name: nationalId
          schema: { type: string }
          description: OFFICER only
        - in: query
          name: applicantUserId
          schema: { type: string }
          description: OFFICER only
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Size'
        - $ref: '#/components/parameters/Sort'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApplicationListResponse' }
        '403': { description: Forbidden }
  /applications/{id}/decision:
    patch:
      tags: [ Decisions ]
      summary: Approve or reject
      security: [ { bearerAuth: [ ] } ]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
        - name: If-Match
          in: header
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/DecisionRequest' }
      responses:
        '200':
          description: Updated with decision
          headers:
            ETag: { $ref: '#/components/headers/ETag' }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApplicationResponse' }
        '400': { description: Validation error }
        '401': { description: Unauthorized }
        '403': { description: Forbidden }
        '404': { description: Not found }
        '409': { description: Invalid state or version conflict }